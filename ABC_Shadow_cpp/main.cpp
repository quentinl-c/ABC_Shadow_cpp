////  main.cpp//  ABC_Shadow_cpp////  Created by Quentin on 02/08/2019.//  Copyright ï¿½ 2019 Quentin. All rights reserved.//#include <iostream>#include "GraphWrapper.hpp"#include <numeric>#include "PottsModel.hpp"#include "MCMCSim.hpp"#include <chrono> // for std::chrono functions#include <fstream>#include "RandomGen.hpp"#include "ABCShadow.hpp"using std::cerr;using std::endl;using std::ofstream;using clock_time = std::chrono::high_resolution_clock;using second_t = std::chrono::duration<double, std::ratio<1> >;int main(int argc, const char * argv[]) {              /*     ======================     initial conditions     ======================     */    GraphWrapper* g = new GraphWrapper(12, 8);    Stats theta0{0, 0, 0};    Stats thetPerf{-0.5, 0.2, 0.3};    Stats delta{0.01, 0.01, 0.01};       PottsModel* model = new PottsModel();    RandomGen* rGen = new RandomGen(2019);    MCMCSim* mh = new MCMCSim(g);        int iter{500000};    int n{200};    int samplerIt{500};        std::cout << "Simulate the observation : " << thetPerf << endl;    std::chrono::time_point<clock_time> m_beg{clock_time::now()};        model->setParams(thetPerf);    vector<Stats> res = mh->gibbsSim(*rGen, *model, 1000);    Stats yObs{};    int t {1};        for (auto el : res) {        yObs = yObs + (el - yObs)/t;        t +=1 ;    }    std::cout << "End Sim generated observation : " << yObs << " in " << std::chrono::duration_cast<second_t>(clock_time::now() - m_beg).count() << " s." << endl;            ofstream outputfile;        outputfile.open("ABC_TEST.txt");    if( !outputfile) {      cerr << "Error: file could not be opened" << endl;      exit(1);    }    ABCShadow* abc = new ABCShadow(mh,                                   model,                                   rGen,                                   yObs,                                   theta0,                                   delta,                                   iter,                                   n,                                   samplerIt);    abc->runABCShadow();    abc->saveChain(outputfile);        return 0;}